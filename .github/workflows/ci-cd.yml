name: Basic CI/CD Pipeline

# SECTION 1: TRIGGERS - Defines when this pipeline should run
on:
  push:
    branches: [main]  # Run when code is pushed to main branch
  pull_request:
    branches: [main]  # Run when a PR targeting main is created

jobs:
  # SECTION 2: CONTINUOUS INTEGRATION - Testing and code quality
  ci:
    runs-on: ubuntu-latest  # The operating system to run on
    steps:
      # Step 1: Get the code from repository
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Step 2: Set up the programming environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      # Step 3: Prepare dependencies
      - name: Install dependencies
        run: |
          pip install flake8 pytest
          pip install -r app/requirements.txt
      
      # Step 4: Test code quality
      - name: Lint code
        run: flake8 app
      
      # Step 5: Run automated tests (optional but recommended)
      - name: Run tests
        run: pytest
  
  # SECTION 3: BUILD - Creating deployable artifacts
  build:
    needs: ci  # Only run if CI job passes
    runs-on: ubuntu-latest
    if: github.event_name == 'push'  # Only build on push events, not PRs
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Step 1: Authenticate with container registry
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      
      # Step 2: Build and publish Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./app
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi-app:latest
  
  # SECTION 4: DEPLOYMENT - Taking built artifacts to production
  deploy:
    needs: build  # Only run if build job passes
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'  # Only deploy from main branch
    steps:
      # Deploy using SSH to a production server
      - name: Deploy to production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            # Pull latest code
            cd ~/media/mq1060/disk2T4060/tungdt/fast-api-backend-project
            git pull
            
            # Deploy with Docker
            docker-compose pull
            docker-compose down
            docker-compose up -d
